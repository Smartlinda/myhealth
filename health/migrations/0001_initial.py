# Generated by Django 2.2.3 on 2019-07-27 15:20

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('tel_no', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'Department',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Disease',
            fields=[
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'Disease',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Hospital',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('address', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'Hospital',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LabTest',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('report', models.TextField()),
            ],
            options={
                'db_table': 'Lab test',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MedicalSupply',
            fields=[
                ('name', models.CharField(max_length=255)),
                ('id', models.IntegerField(db_column='ID', primary_key=True, serialize=False)),
                ('stock', models.IntegerField()),
            ],
            options={
                'db_table': 'Medical supply',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('datetime', models.DateTimeField()),
            ],
            options={
                'db_table': 'Order',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('name', models.CharField(max_length=255)),
                ('dob', models.DateField(db_column='DOB')),
                ('sex', models.BooleanField(blank=True, null=True)),
                ('tel_no', models.CharField(max_length=255)),
                ('address', models.CharField(max_length=255)),
                ('nin', models.IntegerField(db_column='NIN', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'Patient',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('date_time', models.DateTimeField(db_column='date&time')),
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('notes', models.CharField(blank=True, max_length=255, null=True)),
                ('waiting_time', models.TimeField(db_column='waiting time')),
            ],
            options={
                'db_table': 'Schedule',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('tel_no', models.CharField(max_length=255)),
                ('email', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'Staff',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Ehr',
            fields=[
                ('schedule', models.OneToOneField(db_column='schedule', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='health.Schedule')),
                ('amount', models.IntegerField()),
            ],
            options={
                'db_table': 'EHR',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Orderdetail',
            fields=[
                ('orderid', models.OneToOneField(db_column='orderID', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='health.Order')),
                ('amount', models.IntegerField()),
            ],
            options={
                'db_table': 'OrderDetail',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Phr',
            fields=[
                ('patient', models.OneToOneField(db_column='patient', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='health.Patient')),
                ('weight', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
                ('height', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
            ],
            options={
                'db_table': 'PHR',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.PositiveSmallIntegerField(choices=[(1, 'doctor'), (2, 'labPeople'), (3, 'receptionist'), (4, 'patient'), (5, 'admin')])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
